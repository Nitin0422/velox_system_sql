# Generated by Django 4.2.5 on 2023-10-14 07:26

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import my_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_full_name', models.CharField(max_length=200)),
                ('customer_phone_number', models.CharField(max_length=200)),
                ('customer_address', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=200)),
                ('no_of_employees', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='DepartmentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=200)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.department')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=20)),
                ('PAN', models.CharField(max_length=200)),
                ('groups', models.ManyToManyField(related_name='employee_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='employee_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TaskCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_category_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='TaskCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_code_name', models.CharField(max_length=200)),
                ('task_category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='my_app.taskcategory')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deal_amount', models.FloatField()),
                ('paid_amount', models.FloatField()),
                ('due_amount', models.FloatField()),
                ('bill_file', models.FileField(upload_to='bills/', validators=[my_app.models.validate_file_extension])),
                ('invoice_date', models.DateField()),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='my_app.customer')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='my_app.employee')),
                ('task_code', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='my_app.taskcode')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='my_app.department')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='my_app.departmentgroup')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.employee')),
            ],
        ),
    ]
